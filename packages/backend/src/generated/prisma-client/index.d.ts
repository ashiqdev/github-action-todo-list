// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  todoList: (where?: TodoListWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  todoList: (where: TodoListWhereUniqueInput) => TodoListNullablePromise;
  todoLists: (args?: {
    where?: TodoListWhereInput;
    orderBy?: TodoListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TodoList>;
  todoListsConnection: (args?: {
    where?: TodoListWhereInput;
    orderBy?: TodoListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TodoListConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createTodoList: (data: TodoListCreateInput) => TodoListPromise;
  updateTodoList: (args: {
    data: TodoListUpdateInput;
    where: TodoListWhereUniqueInput;
  }) => TodoListPromise;
  updateManyTodoLists: (args: {
    data: TodoListUpdateManyMutationInput;
    where?: TodoListWhereInput;
  }) => BatchPayloadPromise;
  upsertTodoList: (args: {
    where: TodoListWhereUniqueInput;
    create: TodoListCreateInput;
    update: TodoListUpdateInput;
  }) => TodoListPromise;
  deleteTodoList: (where: TodoListWhereUniqueInput) => TodoListPromise;
  deleteManyTodoLists: (where?: TodoListWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  todoList: (
    where?: TodoListSubscriptionWhereInput
  ) => TodoListSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TodoListOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "task_ASC"
  | "task_DESC"
  | "isCompleted_ASC"
  | "isCompleted_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type TodoListWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TodoListWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  task?: Maybe<String>;
  task_not?: Maybe<String>;
  task_in?: Maybe<String[] | String>;
  task_not_in?: Maybe<String[] | String>;
  task_lt?: Maybe<String>;
  task_lte?: Maybe<String>;
  task_gt?: Maybe<String>;
  task_gte?: Maybe<String>;
  task_contains?: Maybe<String>;
  task_not_contains?: Maybe<String>;
  task_starts_with?: Maybe<String>;
  task_not_starts_with?: Maybe<String>;
  task_ends_with?: Maybe<String>;
  task_not_ends_with?: Maybe<String>;
  isCompleted?: Maybe<Boolean>;
  isCompleted_not?: Maybe<Boolean>;
  AND?: Maybe<TodoListWhereInput[] | TodoListWhereInput>;
  OR?: Maybe<TodoListWhereInput[] | TodoListWhereInput>;
  NOT?: Maybe<TodoListWhereInput[] | TodoListWhereInput>;
}

export interface TodoListCreateInput {
  id?: Maybe<ID_Input>;
  task: String;
  isCompleted?: Maybe<Boolean>;
}

export interface TodoListUpdateInput {
  task?: Maybe<String>;
  isCompleted?: Maybe<Boolean>;
}

export interface TodoListUpdateManyMutationInput {
  task?: Maybe<String>;
  isCompleted?: Maybe<Boolean>;
}

export interface TodoListSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TodoListWhereInput>;
  AND?: Maybe<
    TodoListSubscriptionWhereInput[] | TodoListSubscriptionWhereInput
  >;
  OR?: Maybe<TodoListSubscriptionWhereInput[] | TodoListSubscriptionWhereInput>;
  NOT?: Maybe<
    TodoListSubscriptionWhereInput[] | TodoListSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface TodoList {
  id: ID_Output;
  task: String;
  isCompleted?: Boolean;
}

export interface TodoListPromise extends Promise<TodoList>, Fragmentable {
  id: () => Promise<ID_Output>;
  task: () => Promise<String>;
  isCompleted: () => Promise<Boolean>;
}

export interface TodoListSubscription
  extends Promise<AsyncIterator<TodoList>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  task: () => Promise<AsyncIterator<String>>;
  isCompleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface TodoListNullablePromise
  extends Promise<TodoList | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  task: () => Promise<String>;
  isCompleted: () => Promise<Boolean>;
}

export interface TodoListConnection {
  pageInfo: PageInfo;
  edges: TodoListEdge[];
}

export interface TodoListConnectionPromise
  extends Promise<TodoListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TodoListEdge>>() => T;
  aggregate: <T = AggregateTodoListPromise>() => T;
}

export interface TodoListConnectionSubscription
  extends Promise<AsyncIterator<TodoListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TodoListEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTodoListSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface TodoListEdge {
  node: TodoList;
  cursor: String;
}

export interface TodoListEdgePromise
  extends Promise<TodoListEdge>,
    Fragmentable {
  node: <T = TodoListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TodoListEdgeSubscription
  extends Promise<AsyncIterator<TodoListEdge>>,
    Fragmentable {
  node: <T = TodoListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTodoList {
  count: Int;
}

export interface AggregateTodoListPromise
  extends Promise<AggregateTodoList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTodoListSubscription
  extends Promise<AsyncIterator<AggregateTodoList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TodoListSubscriptionPayload {
  mutation: MutationType;
  node: TodoList;
  updatedFields: String[];
  previousValues: TodoListPreviousValues;
}

export interface TodoListSubscriptionPayloadPromise
  extends Promise<TodoListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TodoListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TodoListPreviousValuesPromise>() => T;
}

export interface TodoListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TodoListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TodoListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TodoListPreviousValuesSubscription>() => T;
}

export interface TodoListPreviousValues {
  id: ID_Output;
  task: String;
  isCompleted?: Boolean;
}

export interface TodoListPreviousValuesPromise
  extends Promise<TodoListPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  task: () => Promise<String>;
  isCompleted: () => Promise<Boolean>;
}

export interface TodoListPreviousValuesSubscription
  extends Promise<AsyncIterator<TodoListPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  task: () => Promise<AsyncIterator<String>>;
  isCompleted: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "TodoList",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
